c
self.respond_to?(:add_driver) ? 'dfa' :' sdfaffgf'
self.respond_to?(:add_driver)
exit
subject.instance_variable_get(:destination_location)
subject.send(:destination_location)
c
subject.send(:destination_location)
subject.destination_location
subject.instance_methods
subject
exit
drivers.map{|a| a.id}
a
a.map{|a| a*a}
a = [1,2,3]
drivers.first.id
drivers.each{|a| a.id}
drivers
exit
c
drivers.first.location.distance(from_location)
drivers.first.location
drivers.first
drivers.first.distance(from_location)
drivers.count
drivers
exit
Driver.get
rider.location
rider
c
selected_driver_index
rider.matches.count
rider.matches
c
Rider.get.count
c
data.values.count
data
c
data
exit
cc
c
cc
c
ccc
c
cc
c
cc
c
cc
c
cc
c
cc
c
ccc
c
exit
c
Object.const_get(constant)
c
Object.const_get(constant)
c
Object.const_get(constant)
constant
exit
action
PARAMS_PARSER_CONFIG[action]
PARAMS_PARSER_CONFIG
action
exit
tokens[0]
parsed_command
exit
eixt
exit
parsed_command
c
l
case token[0]
"ADD_DRIVER" == tokens[0]
tokens[0]
tokens
